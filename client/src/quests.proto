syntax = "proto3";
package decentraland.quests;
message User {
  string user_address = 1;
}
message StartQuestRequest {
  string user_address = 1;
  string quest_id = 2;
}
message StartQuestResponse {
  /* There are a few valid reasons not to be accepted:
  *  - Quest is not found
  *  - Quest is deactivated (the owner deleted it)
  *  - User already started the quest
  *  - Internal errors (DB connection failed or something like that) */
  bool accepted = 1;
}
message AbortQuestRequest {
  string user_address = 1;
  string quest_instance_id = 2;
}
message AbortQuestResponse {
  /* There are a few valid reasons not to be accepted:
  *  - Quest instance is not found
  *  - Quest instance is from another user 
  *  - Quest instance already aborted
  *  - Internal errors (DB connection failed or something like that) */
  bool accepted = 1;
}
message Event {
  string user_address = 1;
  Action action = 2;
}
message EventResponse {
  optional fixed32 event_id = 1;
  bool accepted = 2;
}
// Example:
// Action {
//   type: "Location",
//   parameters: {
//     x: 10,
//     y: 10,
//   }
// }
message Action {
  string type = 1;
  map<string, string> parameters = 2;
}
message Task {
  string id = 1;
  optional string description = 2;
  repeated Action action_items = 3;
}
message StepContent {
  repeated Task to_dos = 1;
  repeated string task_completed = 2;
}
message QuestState {
  string quest_instance_id = 1;
  // Every step has one or more tasks. 
  // Tasks description and completed tasks are tracked here.
  map<string, StepContent> current_steps = 2;
  fixed32 steps_left = 3;
  repeated string steps_completed = 4;
  repeated string required_steps = 5;
}
message UserUpdate {
  oneof message {
    QuestState quest_state = 1;
    fixed32 event_ignored = 2;
  }
}
service QuestsService {
  // User actions
  rpc StartQuest(StartQuestRequest) returns (StartQuestResponse) {}
  rpc AbortQuest(AbortQuestRequest) returns (AbortQuestResponse) {}
  rpc SendEvent(Event) returns (EventResponse) {}
  // Listen to changes in quest states and event processing updates
  rpc Subscribe(User) returns (stream UserUpdate) {}
}
